// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/ships/ships.proto

package ships

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ships_GetShip_FullMethodName = "/Ships/GetShip"
)

// ShipsClient is the client API for Ships service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipsClient interface {
	GetShip(ctx context.Context, in *GetShipRequest, opts ...grpc.CallOption) (*GetShipResponse, error)
}

type shipsClient struct {
	cc grpc.ClientConnInterface
}

func NewShipsClient(cc grpc.ClientConnInterface) ShipsClient {
	return &shipsClient{cc}
}

func (c *shipsClient) GetShip(ctx context.Context, in *GetShipRequest, opts ...grpc.CallOption) (*GetShipResponse, error) {
	out := new(GetShipResponse)
	err := c.cc.Invoke(ctx, Ships_GetShip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipsServer is the server API for Ships service.
// All implementations must embed UnimplementedShipsServer
// for forward compatibility
type ShipsServer interface {
	GetShip(context.Context, *GetShipRequest) (*GetShipResponse, error)
	mustEmbedUnimplementedShipsServer()
}

// UnimplementedShipsServer must be embedded to have forward compatible implementations.
type UnimplementedShipsServer struct {
}

func (UnimplementedShipsServer) GetShip(context.Context, *GetShipRequest) (*GetShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShip not implemented")
}
func (UnimplementedShipsServer) mustEmbedUnimplementedShipsServer() {}

// UnsafeShipsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipsServer will
// result in compilation errors.
type UnsafeShipsServer interface {
	mustEmbedUnimplementedShipsServer()
}

func RegisterShipsServer(s grpc.ServiceRegistrar, srv ShipsServer) {
	s.RegisterService(&Ships_ServiceDesc, srv)
}

func _Ships_GetShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipsServer).GetShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ships_GetShip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipsServer).GetShip(ctx, req.(*GetShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ships_ServiceDesc is the grpc.ServiceDesc for Ships service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ships_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ships",
	HandlerType: (*ShipsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShip",
			Handler:    _Ships_GetShip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ships/ships.proto",
}
